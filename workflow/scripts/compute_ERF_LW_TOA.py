import time
from pyclim_noresm.aerosol_forcing import merge_exp_ctrl,calc_LW_ERF_toa
from pyclim_noresm.general_util_funcs import yearly_avg
from utils import load_CMIP_data, copy_meta_data_CMIP

VARS = snakemake.config['variables']

vName_up_LW = VARS[snakemake.wildcards.vName][0]

exp_up_LW = load_CMIP_data(snakemake.input.exp_upwelling_LW, data_vars=[vName_up_LW])
ctrl_up_LW = load_CMIP_data(snakemake.input.ctrl_upwelling_LW, data_vars=[vName_up_LW])
up_LW = merge_exp_ctrl(exp_up_LW, ctrl_up_LW)


ERF = calc_LW_ERF_toa(up_LW[vName_up_LW],
                up_LW[f'control_{vName_up_LW}'].rename(vName_up_LW))
if snakemake.wildcards.freq == 'Ayear':
    ERF = yearly_avg(ERF)

ERF = ERF.to_dataset(name=snakemake.wildcards.vName)
attrs = copy_meta_data_CMIP(exp_up_LW.attrs)
ERF = ERF.assign_attrs(**attrs)
ERF = ERF.assign_attrs(variable_id=snakemake.wildcards.vName)
ERF.attrs['source'] = ', '.join(snakemake.input)
ERF.attrs['history'] = f'@{time.ctime()} Generated by: {__file__}'
ERF.attrs['frequency'] = snakemake.wildcards.freq
ERF.attrs['title'] = 'Effective radiative forcing short wave'
ERF.to_netcdf(snakemake.output.outpath)