## Snakemake Climaso (The CLimate IMpact of AeroSOls: forcing and feedbacks)
##
## Ove Haugvaldstad
##
## MIT license.
##
import os
import glob
import yaml
from scripts.create_lookup_tables import (generate_experiment_lookup_table,
                                    generate_institu_lookup_table,
                                    generate_file_ending_lookup_table)

configfile: 'config/config.yaml'

ROOT_PATH = config['root']
CMIP_VER = config['cmip_version']
VARS=config['variables']
EXPERIMENTS=config['experiments']
TABLE_IDS=config['table_ids']
DEFAULT_TABLE_ID=config['table_id_default']

try:
    with open('config/lookup_experiments.yaml', 'r') as f:
        LOOK_EXP=yaml.safe_load(f)
except FileNotFoundError:
    LOOK_EXP = generate_experiment_lookup_table(ROOT_PATH, CMIP_VER)
    with open('config/lookup_experiments.yaml', 'w') as f:
        LOOK_EXP=yaml.dump(LOOK_EXP,f,default_flow_style=False)

try:
    with open('config/institution.yaml', 'r') as f:
        LOOK_INSTITU=yaml.safe_load(f)
except FileNotFoundError:
    LOOK_INSTITU = generate_institu_lookup_table(ROOT_PATH, CMIP_VER)
    with open('config/institution.yaml', 'w') as f:
        LOOK_INSTITU=yaml.dump(LOOK_INSTITU,f,default_flow_style=False)
try:
    with open(config['lookup_file_endings'], 'r') as f:
        LOOK_FNAMES=yaml.safe_load(f)
except FileNotFoundError:
    LOOK_FNAMES=generate_file_ending_lookup_table(ROOT_PATH,EXPERIMENTS,CMIP_VER)
    with open('config/lookup_file_endings.yaml', 'w') as f:
        LOOK_FNAMES=yaml.dump(LOOK_FNAMES,f,default_flow_style=False)


def get_paths(w, variable,experiment, grid_label=None, activity=None, control=False):
    """
    Get CMIP6 model paths in database based on the lookup tables
    """

    root_path = f'{ROOT_PATH}/{CMIP_VER}'
    if activity:
        activity= activity
    else:
        activity = LOOK_EXP[experiment]
    model = w.model
    variant = config['model_specific_variant'].get(w.model, config['variant_default'])
    table_id = TABLE_IDS.get(variable,DEFAULT_TABLE_ID)
    institution = LOOK_INSTITU[model]
    try:
        file_endings = LOOK_FNAMES[activity][model][experiment][variant][table_id]['fn']
    except:
        raise KeyError(f"File ending is not defined for this combination of {activity}, {model}, {experiment}, {variant} and {table_id} " +
                        "please update config/lookup_file_endings.yaml accordingly")
    if grid_label is None:
        grid_label = LOOK_FNAMES[activity][model][experiment][variant][table_id]['gl'][0]
    if control:
        version = config['version']['version_control'].get(w.model, 'latest')
    else:
        version = config['version']['version_exp'].get(w.model, 'latest')
    
    fname = f'{variable}_{table_id}_{model}_{experiment}_{variant}_{grid_label}'
    paths = expand(
        f'{root_path}/{activity}/{institution}/{model}/{experiment}/{variant}/{table_id}/{variable}/{grid_label}/{version}/{fname}_{{file_endings}}'
        ,file_endings=file_endings)
    # Sometimes the verisons are just messed up... try one more time with latest
    if not os.path.exists(paths[0]):
        paths=expand(
        f'{root_path}/{activity}/{institution}/{model}/{experiment}/{variant}/{table_id}/{variable}/{grid_label}/latest/{fname}_{{file_endings}}'
        ,file_endings=file_endings)
    return paths


include: 'rules/compute_ERF.smk'


## piClim2xdustERFbetzy     : Calculates ERF(LW/SW/Total) and the atmospheric absorbtion 
##                            between piClim-control and piClim-2xdust (works on betzy)
rule piClim2xdustERFbetzy:
    input:
        expand('results/piClim-2xdust/atm_abs/atmabs_piClim-2xdust_{model}_Ayear.nc', 
                model=['EC-Earth3-AerChem', 'GISS-E2-1-G', 'IPSL-CM6A-LR-INCA', 
                        'MIROC6','UKESM1-0-LL', 'GFDL-ESM4', 'MPI-ESM-1-2-HAM',
                        'CNRM-ESM2-1']),

        expand('results/piClim-2xdust/{vName}/{vName}_piClim-2xdust_{model}_Ayear.nc', 
                model=['EC-Earth3-AerChem', 'GISS-E2-1-G', 'IPSL-CM6A-LR-INCA', 
                        'MIROC6','UKESM1-0-LL', 'GFDL-ESM4', 'MPI-ESM-1-2-HAM',
                        'CNRM-ESM2-1'], vName = ['ERFtsw','ERFtlw','ERFtcs'])
## piClim2xdustRadbetzy     : Calculates the direct and cloud radiative effects between piClim-control
##                            and piClim-2xdust (works on betzy)
rule piClim2xdustRadbetzy:
    input:
        expand('results/piClim-2xdust/cloud_rad/{vName}_piClim-2xdust_{model}_Ayear.nc',
            vName=['CloudEff','SWCloudEff','LWCloudEff'], 
            model=['EC-Earth3-AerChem',  
                        'UKESM1-0-LL', 'MPI-ESM-1-2-HAM',
                        'CNRM-ESM2-1']),
        expand('results/piClim-2xdust/rad/{vName}_piClim-2xdust_{model}_Ayear.nc',
            vName=['SWDirectEff','SWDirectEff_cs','LWDirectEff','LWDirectEff_cs'], 
            model=['EC-Earth3-AerChem', 
                        'UKESM1-0-LL', 'MPI-ESM-1-2-HAM',
                        'CNRM-ESM2-1'])

rule norESM:
    input:
        'results/piClim-2x/atm_abs/atmabs_piClim-2xdust_NorESM2-LM_Ayear.nc'
